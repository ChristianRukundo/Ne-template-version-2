{
  "openapi": "3.0.0",
  "info": {
    "title": "Inventory Management System API",
    "description": "API documentation for the Inventory Management System backend.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:5000/api",
      "description": "Development server"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "User authentication and access management"
    },
    {
      "name": "Users",
      "description": "User profile management for the authenticated user"
    },
    {
      "name": "Admin - Users",
      "description": "User management endpoints for administrators"
    },
    {
      "name": "Admin - Roles & Permissions",
      "description": "Role and permission management endpoints for administrators"
    },
    {
      "name": "Inventory Items",
      "description": "Management and viewing of inventory items"
    },
    {
      "name": "Uploads",
      "description": "File upload endpoints"
    },
    {
      "name": "Shop",
      "description": "Endpoints for purchasing items"
    },
    {
      "name": "Transactions",
      "description": "Management and viewing of inventory transactions (Admin)"
    },
    {
      "name": "User Transactions",
      "description": "Viewing transactions recorded by the authenticated user"
    },
    {
      "name": "Reporting",
      "description": "Endpoints for generating reports"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "summary": "Register a new user",
        "operationId": "registerUser",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully, email verification required.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User registered successfully. Please check your email for verification code."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., validation errors, user/email exists)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/verify-email": {
      "post": {
        "summary": "Verify user email address",
        "operationId": "verifyEmail",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmailRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email verified successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email verified successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., missing fields, invalid code, email already verified)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Login user",
        "operationId": "loginUser",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful, returns JWT token and user info.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Login successful"
                    },
                    "token": {
                      "type": "string",
                      "description": "JWT Authentication Token"
                    },
                    "user": {
                      "$ref": "#/components/schemas/UserResponse"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., missing fields)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Invalid email or password)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (Email not verified)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/forgot-password": {
      "post": {
        "summary": "Request password reset code",
        "operationId": "forgotPassword",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  }
                },
                "required": [
                  "email"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset code sent successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password reset code sent to your email"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., missing email)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/reset-password": {
      "post": {
        "summary": "Reset password with code",
        "operationId": "resetPassword",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password reset successful"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., missing fields, invalid code, code expired, weak password)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/me": {
      "get": {
        "summary": "Get current authenticated user's details including permissions",
        "operationId": "getCurrentUserWithPermissions",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns authenticated user's information and permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or invalid token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found (should not happen with valid token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "summary": "Get current authenticated user's profile details (less detailed than /auth/me)",
        "operationId": "getUserProfile",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns authenticated user's profile information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or invalid token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update current authenticated user's profile",
        "operationId": "updateUserProfile",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully, returns updated user info.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Profile updated successfully"
                    },
                    "user": {
                      "$ref": "#/components/schemas/UserResponse"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., validation errors, current password incorrect, new password weak)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or invalid token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/me/transactions": {
      "get": {
        "summary": "Get transactions recorded by the current authenticated user",
        "operationId": "getUserTransactions",
        "tags": [
          "User Transactions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination (starts at 1)",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page (max 100)",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by transaction type",
            "schema": {
              "type": "string",
              "enum": [
                "sale",
                "initial_stock",
                "adjustment_increase",
                "adjustment_decrease"
              ]
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Filter transactions from this date (ISO 8601)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Filter transactions up to this date (ISO 8601)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Field to sort by",
            "schema": {
              "type": "string",
              "enum": [
                "transaction_date",
                "quantity",
                "item_id"
              ],
              "default": "transaction_date"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a paginated list of the user's transactions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or invalid token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (Insufficient permissions - requires 'read_own_transactions')",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/admin/users": {
      "get": {
        "summary": "Get all users (Admin only)",
        "operationId": "adminGetAllUsers",
        "tags": [
          "Admin - Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination (starts at 1)",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page (max 100)",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search by username, email, first name, or last name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "description": "Filter by role name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Field to sort by",
            "schema": {
              "type": "string",
              "enum": [
                "username",
                "email",
                "firstName",
                "lastName",
                "role",
                "createdAt"
              ],
              "default": "createdAt"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a paginated list of all users.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminUserListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or invalid token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (Insufficient role/permissions - requires Admin + 'manage_users')",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new user (Admin only)",
        "operationId": "adminCreateUser",
        "tags": [
          "Admin - Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminCreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully, returns user info.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User created successfully"
                    },
                    "user": {
                      "$ref": "#/components/schemas/AdminUserResponse"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., validation errors, user/email exists, invalid role)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or invalid token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (Insufficient role/permissions - requires Admin + 'manage_users')",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/admin/users/{id}": {
      "get": {
        "summary": "Get user by ID (Admin only)",
        "operationId": "adminGetUserById",
        "tags": [
          "Admin - Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the user to retrieve",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns user information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or invalid token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (Insufficient role/permissions - requires Admin + 'manage_users')",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update user by ID (Admin only)",
        "operationId": "adminUpdateUser",
        "tags": [
          "Admin - Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the user to update",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully, returns updated user info.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User updated successfully"
                    },
                    "user": {
                      "$ref": "#/components/schemas/AdminUserResponse"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., validation errors, user/email exists)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or invalid token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (Insufficient role/permissions - requires Admin + 'manage_users')",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user by ID (Admin only)",
        "operationId": "adminDeleteUser",
        "tags": [
          "Admin - Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the user to delete",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., cannot delete own account)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or invalid token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (Insufficient role/permissions - requires Admin + 'manage_users')",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/admin/roles": {
      "get": {
        "summary": "Get all roles (Admin only)",
        "operationId": "adminGetAllRoles",
        "tags": [
          "Admin - Roles & Permissions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of all roles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or invalid token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (Insufficient role - requires Admin)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/admin/permissions": {
      "get": {
        "summary": "Get all permissions (Admin only)",
        "operationId": "adminGetAllPermissions",
        "tags": [
          "Admin - Roles & Permissions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of all permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Permission"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or invalid token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (Insufficient role - requires Admin)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/admin/users/{id}/role": {
      "put": {
        "summary": "Update user role by ID (Admin only)",
        "operationId": "adminUpdateUserRole",
        "tags": [
          "Admin - Roles & Permissions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the user whose role to update",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "roleName": {
                    "type": "string",
                    "example": "Buyer"
                  }
                },
                "required": [
                  "roleName"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User role updated successfully, returns updated user info.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User role updated successfully"
                    },
                    "user": {
                      "$ref": "#/components/schemas/AdminUserResponse"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., role name required, invalid role, cannot change own role)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or invalid token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (Insufficient role/permissions - requires Admin + 'assign_roles')",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/items": {
      "get": {
        "summary": "Get all inventory items",
        "operationId": "getAllItems",
        "tags": [
          "Inventory Items"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination (starts at 1)",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search by item name, SKU, or description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Field to sort by",
            "schema": {
              "type": "string",
              "enum": [
                "item_name",
                "SKU",
                "current_stock",
                "unit_price",
                "sale_price",
                "created_at"
              ],
              "default": "created_at"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a paginated list of inventory items.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryItemListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or invalid token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (Insufficient permissions - requires 'read_item' or 'read_item_for_sale')",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new inventory item (Admin/Manager only)",
        "operationId": "createItem",
        "tags": [
          "Inventory Items"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateItemRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Item created successfully, returns created item.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string",
                      "example": "Item created successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/InventoryItem"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., validation errors, SKU exists)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or invalid token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (Insufficient permissions - requires 'create_item')",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/items/{id}": {
      "get": {
        "summary": "Get item by ID",
        "operationId": "getItemById",
        "tags": [
          "Inventory Items"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the item to retrieve",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns item information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryItem"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or invalid token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (Insufficient permissions - requires 'read_item' or 'read_item_for_sale')",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update item by ID (Admin/Manager only)",
        "operationId": "updateItem",
        "tags": [
          "Inventory Items"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the item to update",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateItemRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item updated successfully, returns updated item.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string",
                      "example": "Item updated successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/InventoryItem"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., validation errors, SKU exists)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or invalid token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (Insufficient permissions - requires 'update_item')",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete item by ID (Admin/Manager only)",
        "operationId": "deleteItem",
        "tags": [
          "Inventory Items"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the item to delete",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Item deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string",
                      "example": "Item deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., cannot delete item with transactions)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or invalid token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (Insufficient permissions - requires 'delete_item')",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/uploads/images": {
      "post": {
        "summary": "Upload an image file",
        "operationId": "uploadImage",
        "tags": [
          "Uploads"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "description": "Image file to upload (JPG, JPEG, PNG, GIF, max 5MB)"
                  }
                },
                "required": [
                  "image"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Image uploaded successfully, returns URL.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string",
                      "example": "Image uploaded successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "image_url": {
                          "type": "string",
                          "description": "Public URL of the uploaded image"
                        },
                        "filename": {
                          "type": "string",
                          "description": "Filename on the server"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., no file uploaded, invalid file type, file too large)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or invalid token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (Insufficient permissions - requires 'upload_image')",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/shop/buy": {
      "post": {
        "summary": "Purchase an item (Buyer/User only)",
        "operationId": "buyItem",
        "tags": [
          "Shop"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BuyItemRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Purchase successful, returns transaction and updated item info.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string",
                      "example": "Purchase successful"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "transaction": {
                          "$ref": "#/components/schemas/TransactionWithBlockchainHash"
                        },
                        "item": {
                          "$ref": "#/components/schemas/InventoryItem"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., missing fields, invalid quantity, insufficient stock, item not found)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or invalid token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (Insufficient permissions - requires 'create_sale_transaction')",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/transactions": {
      "get": {
        "summary": "Get all transactions (Admin only)",
        "operationId": "getAllTransactions",
        "tags": [
          "Transactions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination (starts at 1)",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search by item name, SKU, or notes",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by transaction type",
            "schema": {
              "type": "string",
              "enum": [
                "sale",
                "initial_stock",
                "adjustment_increase",
                "adjustment_decrease",
                "all"
              ]
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Filter transactions from this date (ISO 8601)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Filter transactions up to this date (ISO 8601, end of day)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Field to sort by",
            "schema": {
              "type": "string",
              "enum": [
                "transaction_date",
                "quantity",
                "item_id",
                "user_id"
              ],
              "default": "transaction_date"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a paginated list of all transactions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminTransactionListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or invalid token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (Insufficient permissions - requires 'read_transactions')",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new transaction (non-sale types) (Admin/Manager only)",
        "operationId": "createTransaction",
        "tags": [
          "Transactions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Transaction recorded successfully, returns created transaction and updated item.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string",
                      "example": "Transaction recorded successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "transaction": {
                          "$ref": "#/components/schemas/TransactionWithBlockchainHash"
                        },
                        "item": {
                          "$ref": "#/components/schemas/InventoryItem"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., missing fields, invalid type/quantity, insufficient stock, item not found)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or invalid token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (Insufficient permissions - requires 'create_transaction')",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{id}": {
      "get": {
        "summary": "Get transaction by ID (Admin only)",
        "operationId": "getTransactionById",
        "tags": [
          "Transactions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the transaction to retrieve",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns transaction information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminTransactionDetailsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or invalid token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (Insufficient permissions - requires 'read_transactions')",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{id}/verify-blockchain": {
      "get": {
        "summary": "Verify blockchain transaction hash for a transaction",
        "operationId": "verifyBlockchainTransaction",
        "tags": [
          "Transactions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the transaction to verify",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns verification result and block explorer URL.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockchainVerificationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or invalid token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (Insufficient permissions - requires 'read_transactions' and potentially 'verify_blockchain')",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found or no blockchain record found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/admin/reports/inventory-summary": {
      "get": {
        "summary": "Get Inventory Summary Report (Admin only)",
        "operationId": "getInventorySummary",
        "tags": [
          "Reporting"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination (starts at 1)",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search by item name, SKU, or description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Field to sort by",
            "schema": {
              "type": "string",
              "enum": [
                "item_name",
                "SKU",
                "current_stock",
                "unit_price",
                "sale_price",
                "created_at"
              ],
              "default": "item_name"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns paginated inventory summary data and totals.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventorySummaryReportResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or invalid token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (Insufficient permissions - requires Admin or 'read_reports')",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/admin/reports/transactions": {
      "get": {
        "summary": "Get Transactions Report (Admin only)",
        "operationId": "getTransactionsReport",
        "tags": [
          "Reporting"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination (starts at 1)",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search by item name, SKU, or notes",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by transaction type ('all' includes all types)",
            "schema": {
              "type": "string",
              "enum": [
                "sale",
                "initial_stock",
                "adjustment_increase",
                "adjustment_decrease",
                "all"
              ],
              "default": "all"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Filter transactions from this date (ISO 8601)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Filter transactions up to this date (ISO 8601, end of day)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Field to sort by",
            "schema": {
              "type": "string",
              "enum": [
                "transaction_date",
                "quantity",
                "item_id",
                "user_id"
              ],
              "default": "transaction_date"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns paginated transactions report data and totals.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsReportResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or invalid token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (Insufficient permissions - requires Admin or 'read_reports')",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/admin/reports/inventory-summary/document": {
      "get": {
        "summary": "Generate Inventory Summary Report as HTML Document (Admin only)",
        "operationId": "generateInventorySummaryDocument",
        "tags": [
          "Reporting"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns HTML document for download.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "headers": {
              "Content-Disposition": {
                "schema": {
                  "type": "string",
                  "example": "attachment; filename=inventory-summary.html"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "text/html"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or invalid token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (Insufficient permissions - requires Admin or 'read_reports'/'export_reports')",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/admin/reports/inventory-summary/csv": {
      "get": {
        "summary": "Generate Inventory Summary Report as CSV (Admin only)",
        "operationId": "generateInventorySummaryCSV",
        "tags": [
          "Reporting"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns CSV data for download.",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "headers": {
              "Content-Disposition": {
                "schema": {
                  "type": "string",
                  "example": "attachment; filename=inventory-summary.csv"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "text/csv"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Missing or invalid token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (Insufficient permissions - requires Admin or 'read_reports'/'export_reports')",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Error description"
          }
        },
        "required": [
          "message"
        ]
      },
      "StandardErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "message": {
            "type": "string",
            "example": "Error description"
          },
          "error": {
            "type": "string",
            "example": "Detailed error message",
            "nullable": true
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
          },
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "description": "Name of the user's role"
          }
        },
        "required": [
          "id",
          "username",
          "email",
          "first_name",
          "last_name",
          "role"
        ]
      },
      "CurrentUserResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserResponse"
          },
          {
            "type": "object",
            "properties": {
              "email_verified": {
                "type": "boolean"
              },
              "permissions": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of permission names for the user's role"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "email_verified",
              "permissions",
              "created_at"
            ]
          }
        ]
      },
      "AdminUserResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserResponse"
          },
          {
            "type": "object",
            "properties": {
              "email_verified": {
                "type": "boolean"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "email_verified",
              "created_at"
            ]
          }
        ]
      },
      "AdminUserListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminUserResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "Role": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "Permission": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "InventoryItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "item_name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "SKU": {
            "type": "string"
          },
          "unit_price": {
            "type": "string",
            "description": "Decimal value represented as a string"
          },
          "sale_price": {
            "type": "string",
            "description": "Decimal value represented as a string"
          },
          "current_stock": {
            "type": "integer"
          },
          "reorder_point": {
            "type": "integer",
            "nullable": true
          },
          "image_url": {
            "type": "string",
            "format": "url",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "item_name",
          "SKU",
          "unit_price",
          "sale_price",
          "current_stock",
          "created_at",
          "updated_at"
        ]
      },
      "InventoryItemListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryItem"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "item_id": {
            "type": "integer"
          },
          "transaction_type": {
            "type": "string",
            "enum": [
              "sale",
              "initial_stock",
              "adjustment_increase",
              "adjustment_decrease"
            ]
          },
          "quantity": {
            "type": "integer"
          },
          "transaction_date": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "integer",
            "description": "ID of the user who recorded the transaction"
          },
          "recorded_by": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "username": {
                "type": "string"
              },
              "first_name": {
                "type": "string"
              },
              "last_name": {
                "type": "string"
              },
              "email": {
                "type": "string",
                "format": "email"
              },
              "role": {
                "$ref": "#/components/schemas/RoleBasic"
              }
            },
            "required": [
              "id",
              "username",
              "first_name",
              "last_name",
              "email",
              "role"
            ]
          },
          "item": {
            "$ref": "#/components/schemas/InventoryItem"
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "blockchain_tx_hash": {
            "type": "string",
            "nullable": true,
            "description": "Hash of the transaction on the blockchain"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "item_id",
          "transaction_type",
          "quantity",
          "transaction_date",
          "user_id",
          "created_at",
          "updated_at"
        ]
      },
      "TransactionWithBlockchainHash": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Transaction"
          },
          {
            "type": "object",
            "properties": {
              "blockchain_tx_hash": {
                "type": "string",
                "nullable": true,
                "description": "Hash of the transaction on the blockchain (included in creation response)"
              }
            }
          }
        ]
      },
      "TransactionListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "AdminTransactionListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TransactionListResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdminTransactionDetailsResponse"
                }
              }
            }
          }
        ]
      },
      "AdminTransactionDetailsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Transaction"
          },
          {
            "type": "object",
            "properties": {
              "item": {
                "$ref": "#/components/schemas/InventoryItem"
              },
              "recorded_by": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer"
                  },
                  "username": {
                    "type": "string"
                  },
                  "first_name": {
                    "type": "string"
                  },
                  "last_name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "role": {
                    "$ref": "#/components/schemas/RoleBasic"
                  }
                },
                "required": [
                  "id",
                  "username",
                  "first_name",
                  "last_name",
                  "email",
                  "role"
                ]
              }
            },
            "required": [
              "item",
              "recorded_by"
            ]
          }
        ]
      },
      "RoleBasic": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "Total number of items across all pages"
          },
          "page": {
            "type": "integer",
            "description": "Current page number"
          },
          "limit": {
            "type": "integer",
            "description": "Number of items per page"
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages"
          }
        },
        "required": [
          "total",
          "page",
          "limit",
          "totalPages"
        ]
      },
      "RegisterRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "format": "password"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          }
        },
        "required": [
          "username",
          "email",
          "password"
        ]
      },
      "VerifyEmailRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "code"
        ]
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "format": "password"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "ResetPasswordRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "verification_code": {
            "type": "string",
            "description": "The verification code sent to the user's email (first 6 chars of token)"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The new password"
          }
        },
        "required": [
          "email",
          "verification_code",
          "password"
        ]
      },
      "UpdateProfileRequest": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "current_password": {
            "type": "string",
            "format": "password",
            "description": "Required if new_password is provided"
          },
          "new_password": {
            "type": "string",
            "format": "password",
            "description": "New password"
          }
        }
      },
      "AdminCreateUserRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "format": "password"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "roleName": {
            "type": "string",
            "description": "Name of the role to assign",
            "example": "Viewer"
          }
        },
        "required": [
          "username",
          "email",
          "password",
          "firstName",
          "lastName"
        ]
      },
      "AdminUpdateUserRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "Set a new password for the user"
          }
        }
      },
      "CreateItemRequest": {
        "type": "object",
        "properties": {
          "item_name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "SKU": {
            "type": "string"
          },
          "unit_price": {
            "type": "number",
            "format": "float",
            "description": "Cost per unit"
          },
          "sale_price": {
            "type": "number",
            "format": "float",
            "description": "Selling price per unit"
          },
          "current_stock": {
            "type": "integer"
          },
          "reorder_point": {
            "type": "integer",
            "nullable": true
          },
          "image_url": {
            "type": "string",
            "format": "url",
            "nullable": true,
            "description": "URL of the item image (uploaded separately)"
          }
        },
        "required": [
          "item_name",
          "SKU",
          "unit_price",
          "sale_price",
          "current_stock"
        ]
      },
      "UpdateItemRequest": {
        "type": "object",
        "properties": {
          "item_name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "SKU": {
            "type": "string"
          },
          "unit_price": {
            "type": "number",
            "format": "float",
            "description": "Cost per unit"
          },
          "sale_price": {
            "type": "number",
            "format": "float",
            "description": "Selling price per unit"
          },
          "current_stock": {
            "type": "integer"
          },
          "reorder_point": {
            "type": "integer",
            "nullable": true
          },
          "image_url": {
            "type": "string",
            "format": "url",
            "nullable": true,
            "description": "URL of the item image (uploaded separately)"
          }
        }
      },
      "BuyItemRequest": {
        "type": "object",
        "properties": {
          "item_id": {
            "type": "integer",
            "description": "ID of the item to purchase"
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity to purchase (must be > 0)"
          }
        },
        "required": [
          "item_id",
          "quantity"
        ]
      },
      "CreateTransactionRequest": {
        "type": "object",
        "properties": {
          "item_id": {
            "type": "integer",
            "description": "ID of the inventory item"
          },
          "transaction_type": {
            "type": "string",
            "enum": [
              "initial_stock",
              "adjustment_increase",
              "adjustment_decrease"
            ],
            "description": "Type of non-sale transaction"
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity involved (must be > 0)"
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "transaction_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date and time of the transaction (defaults to now)"
          }
        },
        "required": [
          "item_id",
          "transaction_type",
          "quantity"
        ]
      },
      "InventorySummaryReportItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InventoryItem"
          },
          {
            "type": "object",
            "properties": {
              "total_value": {
                "type": "number",
                "format": "float",
                "description": "Calculated total cost value for this item's stock"
              },
              "total_sale_value": {
                "type": "number",
                "format": "float",
                "description": "Calculated total sale value for this item's stock"
              },
              "potential_profit": {
                "type": "number",
                "format": "float",
                "description": "Calculated potential profit for this item's stock (total_sale_value - total_value)"
              }
            },
            "required": [
              "total_value",
              "total_sale_value",
              "potential_profit"
            ]
          }
        ]
      },
      "InventorySummaryReportResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventorySummaryReportItem"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "totals": {
            "type": "object",
            "properties": {
              "totalItems": {
                "type": "integer"
              },
              "totalStock": {
                "type": "integer"
              },
              "totalValue": {
                "type": "number",
                "format": "float"
              },
              "totalSaleValue": {
                "type": "number",
                "format": "float"
              },
              "totalPotentialProfit": {
                "type": "number",
                "format": "float"
              }
            },
            "required": [
              "totalItems",
              "totalStock",
              "totalValue",
              "totalSaleValue",
              "totalPotentialProfit"
            ]
          }
        },
        "required": [
          "data",
          "pagination",
          "totals"
        ]
      },
      "TransactionsReportItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "item_name": {
            "type": "string"
          },
          "SKU": {
            "type": "string"
          },
          "transaction_type": {
            "type": "string",
            "enum": [
              "sale",
              "initial_stock",
              "adjustment_increase",
              "adjustment_decrease"
            ]
          },
          "quantity": {
            "type": "integer"
          },
          "transaction_date": {
            "type": "string",
            "format": "date-time"
          },
          "recorded_by": {
            "type": "string",
            "description": "Full name of the recording user (e.g., 'Admin User')"
          },
          "username": {
            "type": "string",
            "description": "Username of the recording user"
          },
          "role": {
            "type": "string",
            "description": "Role name of the recording user"
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "unit_price": {
            "type": "number",
            "format": "float"
          },
          "sale_price": {
            "type": "number",
            "format": "float"
          },
          "total_value": {
            "type": "number",
            "format": "float",
            "description": "Calculated value for this transaction row (quantity * sale_price for sale, quantity * unit_price for others)"
          },
          "blockchain_tx_hash": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "item_name",
          "SKU",
          "transaction_type",
          "quantity",
          "transaction_date",
          "recorded_by",
          "username",
          "role",
          "unit_price",
          "sale_price",
          "total_value"
        ]
      },
      "TransactionsReportResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionsReportItem"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "totals": {
            "type": "object",
            "properties": {
              "totalTransactions": {
                "type": "integer"
              },
              "totalQuantity": {
                "type": "integer"
              },
              "totalValue": {
                "type": "number",
                "format": "float",
                "description": "Calculated total value across all transactions in the report (sum of total_value per row)"
              }
            },
            "required": [
              "totalTransactions",
              "totalQuantity",
              "totalValue"
            ]
          }
        },
        "required": [
          "data",
          "pagination",
          "totals"
        ]
      },
      "BlockchainVerificationResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "properties": {
              "transaction_id": {
                "type": "integer"
              },
              "blockchain_tx_hash": {
                "type": "string"
              },
              "is_valid": {
                "type": "boolean",
                "description": "Result of backend hash verification"
              },
              "block_explorer_url": {
                "type": "string",
                "format": "url",
                "nullable": true,
                "description": "URL to view the transaction on a block explorer (if applicable)"
              }
            },
            "required": [
              "transaction_id",
              "blockchain_tx_hash",
              "is_valid"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      }
    }
  }
}